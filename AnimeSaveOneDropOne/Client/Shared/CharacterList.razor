@inject ICharacterService CharacterService
@inject IAnimeService AnimeService

@page "/characters"

<ul class="list-unstyled" style="background-color: transparent; display: inline;">
    @if (CharacterService.AnimeCharacters != null)
    {
        var sortedList = CharacterService.AnimeCharacters.OrderBy(c => c.Points).ToList();

        sortedList.Reverse();
        int pos = 1;

        foreach (var animeCharacter in sortedList)
        {
            if (pos <= 100)
            {
                <li class="media my-3" style="border-radius: 10px; display: flex;">
                    <div class="media-img-wrapper mr-2">
                        <a href="/character/@animeCharacter.MalId">
                            <img class="media-img" src="@animeCharacter.ImageUrl" alt="@animeCharacter.Name" />
                        </a>
                    </div>
                    <div class="media-body">
                        <a href="/character/@animeCharacter.MalId">
                            <h4 class="mb-0">@animeCharacter.Name</h4>
                        </a>
                        <h3 class="rank">Rank: @pos (@animeCharacter.Points PTS)</h3>
                    </div>
                </li>

                animeCharacter.PreviousRank = animeCharacter.Rank;
                animeCharacter.Rank = pos;

                CharacterService.UpdateAnimeCharacter(animeCharacter);
            }

            pos++;
        }
    }
</ul>

@*<div class="my-3">
    @foreach(var anime in AnimeService.Animes)
    {
        <li class="media my-3" style="border-radius: 10px;">
            <div class="media-img-wrapper mr-2">
                <h4 class="mb-0" style="margin: auto;">@anime.Name</h4>
            </div>
        </li>
    }
</div>*@

@code {
    [Parameter]
    public int? AnimeMalId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await AnimeService.LoadAnimes();
        await CharacterService.LoadAnimeCharacters();
    }
}
